
function main()
clear;clc;
[voice,Fs]=VoiceMix('data_record.wav','女生.mp3');
sound(voice, Fs)
pause(5)

figure(1)
voice = voice(:,1);
voice = voice';
N = length(voice);%求取抽样点数
t = (0:N-1)/Fs;%显示实际时间
y = fft(voice);%对信号进行傅里叶变换
f = Fs/N*(0:round(N/2)-1);%显示实际频点的一半，频域映射，转化为HZ
subplot(211);
plot(t,voice,'g');%绘制时域波形
xlabel('Time/s');ylabel('Amplitude');
title('信号的波形');
grid;
subplot(212);
plot(f,abs(y(1:round(N/2))));
xlabel('Frequency/Hz');ylabel('Amplitude');
title('信号的频谱');
grid;

figure(2)
voice1 = filter(Filter_FIR,voice)
sound(voice1,Fs)
N = length(voice1);%求取抽样点数
t = (0:N-1)/Fs;%显示实际时间
y = fft(voice1);%对信号进行傅里叶变换
f = Fs/N*(0:round(N/2)-1);%显示实际频点的一半，频域映射，转化为HZ
subplot(211);
plot(t,voice1,'g');%绘制时域波形
xlabel('Time/s');ylabel('Amplitude');
title('信号的波形');
grid;
subplot(212);
plot(f,abs(y(1:round(N/2))));
xlabel('Frequency/Hz');ylabel('Amplitude');
title('信号的频谱');
grid;


figure(3)
[x,Fs]=audioread('data_record.wav');
disp(Fs)
x = x(:,1);
x = x';
N = length(x);%求取抽样点数
t = (0:N-1)/Fs;%显示实际时间
y = fft(x);%对信号进行傅里叶变换
f = Fs/N*(0:round(N/2)-1);%显示实际频点的一半，频域映射，转化为HZ
subplot(211);
plot(t,x,'g');%绘制时域波形
xlabel('Time/s');ylabel('Amplitude');
title('信号的波形');
grid;
hold on
subplot(212);
plot(f,abs(y(1:round(N/2))));
xlabel('Frequency/Hz');ylabel('Amplitude');
title('信号的频谱');
grid;
hold on

% [x,Fs]=audioread('女生.mp3');
% disp(Fs)
% x = x(:,1);
% x = x';
% N = length(x);%求取抽样点数
% t = (0:N-1)/Fs;%显示实际时间
% y = fft(x);%对信号进行傅里叶变换
% f = Fs/N*(0:round(N/2)-1);%显示实际频点的一半，频域映射，转化为HZ
% subplot(211);
% plot(t,x,'g');%绘制时域波形
% xlabel('Time/s');ylabel('Amplitude');
% title('信号的波形');
% grid;
% subplot(212);
% plot(f,abs(y(1:round(N/2))));
% xlabel('Frequency/Hz');ylabel('Amplitude');
% title('信号的频谱');
% grid;
 
function [Voice,Fs]=VoiceMix(FileName1,FileName2)
% 建议：
% FileName1为较长的音频文件，即10s的那个音频文件
% FileName2为较短的音频文件，即如汽笛，打雷等的噪声文件
% Output
% Voice   混合后的音频时域信号
% Fs      混合后的音频时域信号采样频率
[y,Fs] = audioread(FileName1);
[y2,Fs2] = audioread(FileName2);
 
% 有的音频可能是多通道，统一取一通道
ft = y(:,1);
ft2=y2(:,1);
 
% 将y2转换成和y一样采用频率的音频
% resample函数将采样频率从Fs2调整到Fs
y3=resample(ft2,Fs,Fs2);
 
Length=length(y(:,1));
Length2=length(y3(:,1));
 
if Length>=Length2
    % 随机取得一个长度，将短的音频插入到长的音频中去
    Start=floor(rand*abs(Length-Length2));
    % 音频混合
    Voice=y;
    Voice(Start+1:Start+Length2)=y3+ft(Start+1:Start+Length2);
else
    % 随机取得一个长度，将短的音频插入到长的音频中去
    Start=floor(rand*abs(Length2-Length));
    % 音频混合
    Voice=y3;
    Voice(Start+1:Start+Length)=ft+y3(Start+1:Start+Length);
end

function Hd = Filter_FIR
%FILTER_FIR Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.7 and Signal Processing Toolbox 8.3.
% Generated on: 22-Jun-2021 12:52:59

% Equiripple Lowpass filter designed using the FIRPM function.

% All frequency values are in Hz.
Fs = 44100;  % Sampling Frequency

Fpass = 150;             % Passband Frequency
Fstop = 200;             % Stopband Frequency
Dpass = 0.057501127785;  % Passband Ripple
Dstop = 0.0001;          % Stopband Attenuation
dens  = 20;              % Density Factor

% Calculate the order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fpass, Fstop]/(Fs/2), [1 0], [Dpass, Dstop]);

% Calculate the coefficients using the FIRPM function.
b  = firpm(N, Fo, Ao, W, {dens});
Hd = dfilt.dffir(b);

% [EOF]